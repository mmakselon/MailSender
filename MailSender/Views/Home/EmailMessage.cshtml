@model MailSender.Models.ViewModels.EmailMessageViewModel

@{
    ViewBag.Title ="E-mail";
}

<h1 class="mb-3">Wiadomość e-mail</h1>

@if (Model.EmailMessage.Id != 0)
{
    <button class="btn btn-primary mb-3"
            onclick='window.location.href="@Url.Action("SendEmail","Home", new { emailMessage = Model.EmailMessage.Id})"'>
        Wyślij
    </button>
    <button class="btn btn-secondary mb-3"
            onclick="generatePdf()">
        Generuj PDF
    </button>
}

<div class="row">
    <div class="col-lg-6">
        @using (Html.BeginForm("EmailMessage", "Home"))
        {
            @Html.AntiForgeryToken()

            if (Model.EmailMessage.Id == 0)
            {
                <p class="alert alert-info mt-4 mb-4">
                    Pola tytuł, treść, nadawca i odbiorca są
                    <strong>wymagane</strong>.
                </p>
            }

            @Html.HiddenFor(x => x.EmailMessage.Id)
            @Html.HiddenFor(x => x.EmailMessage.UserId)

            <div class="form-group mt-3">
                @Html.LabelFor(x => x.EmailMessage.EmailAccountParams.Id)
                @Html.DropDownListFor(x => x.EmailMessage.EmailAccountParams.Id,
               new SelectList(Model.EmailAccountsParameters, "Id", "SenderName"),
                    "--Wybierz konto--", new { @class = "form-control" })
            </div>

            <div class="form-group">
                @Html.LabelFor(x => x.EmailMessage.Subject)
                @Html.TextBoxFor(x => x.EmailMessage.Subject,
                    new { @class = "form-control", autofocus = "autofocus" })
                @Html.ValidationMessageFor(x => x.EmailMessage.Subject)
            </div>

            <div class="form-group">
                @Html.LabelFor(x => x.EmailMessage.Body)
                @Html.TextAreaFor(x => x.EmailMessage.Body,
                    new { @class = "form-control" })
                @Html.ValidationMessageFor(x => x.EmailMessage.Body)
            </div>

            <div class="form-group">
                @Html.LabelFor(x => x.EmailMessage.EmailTo)
                @Html.TextBoxFor(x => x.EmailMessage.EmailTo,
                    new { @class = "form-control" })
                @Html.ValidationMessageFor(x => x.EmailMessage.EmailTo)
            </div>

            <div class="form-group">
                @Html.LabelFor(x => x.EmailMessage.StatusId)
                @Html.DropDownListFor(x => x.EmailMessage.StatusId,
                new SelectList(Model.Statuses, "Id", "Name"),
                "-- Wybierz status --",
                    new { @class = "form-control" })
                @Html.ValidationMessageFor(x => x.EmailMessage.StatusId)
            </div>

            <div class="form-group">
                @Html.LabelFor(x => x.EmailMessage.SendDate)
                @Html.TextBoxFor(x => x.EmailMessage.SendDate,
                "{0:dd-MM-yyyy}",
                    new
                    {
                        @class = "form-control",
                        @id = "SendDate",
                        autocomplete = "off"
                    })
                @Html.ValidationMessageFor(x => x.EmailMessage.SendDate)
            </div>


            <button type="submit" name="action" value="save" class="btn btn-primary btn-lg mb-5">
                Zapisz
            </button>
            <button type="submit" name="action" value="saveAndSend" class="btn btn-primary btn-lg mb-5">
                Zapisz i wyślij
            </button>
        }
    </div>
</div>


@section Scripts
{
    <script type="text/javascript">
        function generatePdf() {

        }

        $(document).ready(function () {

            $.validator.methods.number = function (value, element) {
                return this.optional(element) || /^-?(?:\d+|\d{1,3}(?:[\s\.,]\d{3})+)(?:[\.,]\d+)?$/.test(value);
            }

            $.validator.methods.date = function (value, element) {
                var isChrome = /Chrome/.test(navigator.userAgent) && /Google Inc/.test(navigator.vendor);
                if (isChrome) {
                    var d = new Date();
                    return this.optional(element) || !/Invalid|NaN/.test(new Date(d.toLocaleDateString(value)));
                } else {
                    return this.optional(element) || !/Invalid|NaN/.test(new Date(value));
                }
            };


            $('#SendDate').datepicker({
                format: "dd-mm-yyyy",
                language: "pl",
                multidate: false,
                autoclose: true,
                todayHighlight: true,
                forceParse: false
            });
        });
    </script>
}

